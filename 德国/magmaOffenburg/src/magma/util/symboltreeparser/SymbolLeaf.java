/* Copyright 2009 Hochschule Offenburg
 * Klaus Dorer, Mathias Ehret, Stefan Glaser, Thomas Huber,
 * Simon Raffeiner, Srinivasa Ragavan, Thomas Rinklin,
 * Joachim Schilling, Ingo Schindler, Rajit Shahi
 *
 * This file is part of magmaOffenburg.
 *
 * magmaOffenburg is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * magmaOffenburg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with magmaOffenburg. If not, see <http://www.gnu.org/licenses/>.
 */
package magma.util.symboltreeparser;

/**
 * Represents a single symbol as specified in the RoboCup manual
 * 
 * In the symbol string
 * 
 * (A (B C))
 * 
 * The token "A", the list "(B B)" and the two sub-tokens "B" and "C" are all
 * valid symbols.
 * 
 * Symbol nodes are read-only once created and usually generated by a Symbol
 * Tree generator (See SymbolTreeParser)
 * 
 * @author Simon Raffeiner
 * 
 */
public class SymbolLeaf
{
	private String content = null;

	/**
	 * Simple Constructor
	 */
	public SymbolLeaf()
	{
		this("");
	}

	/**
	 * Assignment constructor
	 * 
	 * @param content Node Content
	 */
	public SymbolLeaf(String content)
	{
		this.content = content;
	}

	/**
	 * Get node content
	 * 
	 * @return Node content
	 */
	public String content()
	{
		return content;
	}

	@Override
	public String toString()
	{
		return content;
	}
}
