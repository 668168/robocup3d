/*
    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

#include "RoleForward.h"

#include "../Behavior/BhvDribble.h"
#include "../Behavior/BhvBasicTurn.h"
#include <iomanip>

using namespace std;
void RoleForward::execute()
{
// if(WorldModel::instance().getPlayMode()== PM_KickOff_Left || WorldModel::instance().getPlayMode()==PM_PlayOn)
//     {
//     Kick::instance().execute(true);
//     std::cout<<"distance to ball is= "<<WorldModel::instance().getPolarBallPos().distance;
//     std::cout<<"theta to ball is= "<<WorldModel::instance().getPolarBallPos().theta;
//    }
//       else
//       {
 //if(WorldModel::instance().getCurrentCycle()>50)
   // SuperKick::instance().execute(false);
   WorldModel & wm = WorldModel::instance();
   if (  WorldModel::i().isFellDown())  /// agar zamin khorde bodam
     wm.setCurrentAction(ACT_STANDUP);
   else if (SuperKick::instance().isKickDone() && wm.getCurrentAction() == ACT_KICK) ///agar dar mode kick bodim va kareman tamam shod
     wm.setCurrentAction(ACT_STOP);
   else if (wm.isBallKickable()) /// agar mitavanim kick konim
   {
     ///if (wm.isStable() || wm.getCurrentAction() == ACT_KICK) /// agar stable bodim ya dar hal kick kardan bodim 
     ///  wm.setCurrentAction(ACT_KICK);
     ///else   
       ///wm.setCurrentAction(ACT_STOP);
   }
//    else if ()
//      wm.setCurrentAction(ACT_WALK);
        
	switch (wm.getCurrentAction() ) 
	{
	  case ACT_WALK:
            doMove();
	    break;
	  case ACT_STANDUP:
	    doStandUp();
	    break;
	  case ACT_KICK:
	    doKick();
	    break;
	  case ACT_STOP:
	    doStop();
	    break;
	  default:
	    doMove();
	}
	    
	    
//        else 
          //if( WorldModel::i().getCurrentAction() !=ACT_KICK )
  //         doStop();
//BhvBehindBallSetup(15).execute();
//BhvBasicTurn(15).execute();
// BhvBehindBallSetup(15).execute();
}
//     std::cout<<setprecision(3)<<fixed<<"distance to ball is:= "<<WorldModel::instance().getPolarBallPos().distance;

//     BhvBasicTurn(12).execute();
 // }

void RoleForward::doKick()
{
   //WorldModel::instance().setCurrentAction(ACT_KICK);
   SuperKick::instance().execute(true);
   if (SuperKick::instance().isKickDone())
   {
     WorldModel::instance().setCurrentAction(ACT_STOP);
     SuperKick::instance().setKickDone(false);
   }
   
   std::cout<<"RoleForward doKick execute"<<std::endl;
   
};

void RoleForward::doMove()
{
    BhvFocusBall().execute();
    ///std::cout<<"RoleForward doMove execute"<<std::endl;
    WorldModel& wm = WorldModel::instance();
    wm.setCurrentAction(ACT_WALK);
     //if ( wm.getBallPos().y() < 0.7f )
         BhvDribble( Vector3f(9.0f,0.0f,0.0f) ).execute();
     //else
       //  BhvBasicWalk(Vector2f (wm.getBallPos().x() - 1.5, 0.0 ) ).execute();
};

void RoleForward::doStandUp()
{
    std::cout<<"RoleForward doStandup execute"<<std::endl;
    WorldModel::instance().setCurrentAction(ACT_STANDUP);
    BhvBasicStandup().execute();
    if(StandUp::instance().isStandUpFinished())
      WorldModel::instance().setCurrentAction(ACT_STOP);
};

void RoleForward::doStop()
{
//     BhvFocusBall().execute();
    std::cout<<"RoleForward doStop execute"<<std::endl;
    WorldModel& wm   = WorldModel::instance();
    Walk&       walk = Walk::instance();

    if (walk.IsPrepareDone() && wm.isStable())
    {
        cout <<"RoleForward::doStop : 'prepare walk done' "<<endl;
        //if(WorldModel::instance().getCurrentAction()!=ACT_KICK)
        wm.setCurrentAction(ACT_WALK);
    }
    else
    {
        cout <<"RoleForward::doStop : 'prepare walk done' "<<endl;
        wm.setCurrentAction(ACT_STOP);
        walk.setWalkPhase(Walk::PREPARE);
        walk.Execute(0.0,0.0,SIDE_FORWARD);
        Effectors::instance().setActionCommand();
    }
}