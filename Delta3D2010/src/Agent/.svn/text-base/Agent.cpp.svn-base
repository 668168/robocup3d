#include "Agent.h"

using namespace std;
 
Agent::Agent()
:flag(false),flag1(false),flag2(false),rotateFlag(true)
{
    front=0;
    rear=0;
    F = new FallDownRecognition();
}
 
Agent::~Agent()
{
}


void Agent::options(int argc, char* argv[])
{
   for( int i = 0; i < argc; i++)
   {
       if ( strcmp( argv[i], "--help" ) == 0 )
       {
          std::cout << "\nusage: Delta3D [options]"           << std::endl;
          std::cout << "\noptions:"                           << std::endl;
          std::cout << " --help      prints this message."    << std::endl;
          std::cout << " --host=IP   IP of the server."       << std::endl;
          std::cout << " --unum mUnum Player Uniform Number." << std::endl;
          std::cout << "\n";
          exit(0);
       }
       else if ( strncmp( argv[i], "--host", 6 ) == 0 )
       {
          string tmp=argv[i];
          if ( tmp.length() <= 7 ) // minimal sanity check
          {
             std::cout << "\nusage: Delta3D [options]"            << std::endl;
             std::cout << "\noptions:"                            << std::endl;
             std::cout << " --help      prints this  message."    << std::endl;
             std::cout << " --host=IP   IP of the server."        << std::endl;
             std::cout << " --unum mUnum Player Uniform Number."  << std::endl;
             std::cout << "\n";
             exit(0);
          }
          Connection::instance().setServer(tmp.substr(7));
       }
       if ( strcmp( argv[i], "--unum" ) == 0 )
       {
          WorldModel::instance().setUnum(argv[i+1]); ///For Player Uniform Numberdelta3d.
       }
   }
}

std::string Agent::getActionType()
{
    return mActionType;
}

void Agent::setActionType(std::string& action)
{
    mActionType=action;
}

void Agent::connect()
{
    ///Creat Robot
    Effectors::instance().init();
    
    ///set agents formation
    Formation::instance();
    sleep(1);
    
    ///beam agents
    Effectors::instance().beam();

    ///set Walk Params
    Kinematic::instance().init();
    
    StandUp::instance().standupFinished=true;
}

void Agent::sense()
{
     string msg;
     Connection::instance().getMessage(msg);
     WorldModel::instance().update(msg);
     cout << "^^^^^^^^^^^^^^^^"<<endl<<msg<<endl<<"^^^^^^^^^^^^^^^^^^^^^^^^";
     cout<<"cycle is:"<<WorldModel::instance().getCurrentCycle()<<endl;
     Effectors::instance().updateJointAngle(Kinematic::instance().getLink());
}

void Agent::think()
{
   //Strategy::instance().createRole();
Formation& formation = Formation::instance();
    if(!role)
    {
        TPlayerTypeMap::const_iterator  iter = 
                        formation.mPlayerTypeMap.find(WorldModel::i().getUnum());
        if(iter == formation.mPlayerTypeMap.end())
        {
          std::cout <<"error not find player"<<WorldModel::i().getUnum()
                    <<"  in formation"<<std::endl;
//          return false;
        }
        if( (* iter).second == PT_GOALKEEPER )
        {
          role = boost::shared_ptr<SoccerRole>(RoleForward::create());
          std::cout<< "RoleGoalie set"<<std::endl;
        }
        else if ((* iter).second == PT_MIDFIELDER )
        {
          role = boost::shared_ptr<SoccerRole>(RoleForward::create());
          std::cout<< "RoleDefensive set"<<std::endl;
        }
        else if((* iter).second == PT_ATTACKER )
        {
          role = boost::shared_ptr<SoccerRole>(RoleForward::create());
          std::cout<< "RoleForward set"<<std::endl;
        }
        else
        {
          std::cout<< "Error role not set"<<std::endl;
        }
    }

    //TeamPlayer::instance().think();
}

void Agent::act()   ///set Walk Params
  
{ 
      //Strategy::instance().executeRole();
      if(role)
      {
         role->execute();
         std::cout<<"role "<<role->name()<<" is executed"<<std::endl;
      }
      string s1 = Effectors::instance().mActionCommand+AngularMotor::instance().str();
      //cout << "#################################"<<endl<<s1<<endl<<"###########################";
      Connection::instance().sendMessage(s1 );
      AngularMotor::instance().clear();

}

// if(rear>9)
//        rear=0;
//       if (front>9)
//        front=0;
//       queue[rear]=Effectors::instance().mActionCommand+AngularMotor::instance().str();
//       rear++;
//       Connection::instance().sendMessage(queue[front]);
//       front++;