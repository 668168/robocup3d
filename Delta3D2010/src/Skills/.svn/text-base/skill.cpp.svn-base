/*
    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

#include "skill.h"

Skill::Skill() {
    //WM = wm;
        cout << "============================!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1";

    f.open("ACT/standupF.txt");
    f >> x >> y;
    for (int i = 0; i < x; i++)
        for (int j = 0; j < y; j++)
            f >> standupF[i][j];
    f.close();

    f.open("ACT/hfr.txt");
    f >> x >> y;
    for (int i = 0; i < x; i++)
        for (int j = 0; j < y; j++)
            f >> DPR[i][j];
    f.close();

    f.open("ACT/hfl.txt");
    f >> x >> y;
    for (int i = 0; i < x; i++)
        for (int j = 0; j < y; j++)
            f >> DPL[i][j];
    f.close();

    f.open("ACT/zero.txt");
    f >> x >> y;
    for (int i = 0; i < x; i++)
        for (int j = 0; j < y; j++)
            f >> zero[i][j];
    f.close();

    f.open("ACT/zero-eh.txt");
    f >> x >> y;
    for (int i = 0; i < x; i++)
        for (int j = 0; j < y; j++)
            f >> zeroe[i][j];
    f.close();

}
////////////////////////////////////////////////////////////////////
Skill& Skill::instance()
{
	static Skill sSkill;
	return sSkill;
}

///////////////////////////////////////////////////////////////////

void Skill::open_files(){
ifstream fp ("standupF.txt");
    if(!fp){
	cout <<"cannot open file"<<f.is_open();
	}
    fp >> x >> y;
//cout <<"@@@@@@@@@@@@@@@@@@@@@@@"<<endl<<x<<y<<endl<<"@@@@@@@@@@@@@@@@@@@@";
    for (int i = 0; i < x; i++)
        for (int j = 0; j < y; j++)
            {fp >> standupF[i][j];
//             cout <<"@@@@@@@@@@@@@@@@@@@@@@@"<<endl<<standupF[i][j]<<endl<<"@@@@@@@@@@@@@@@@@@@@";
            }
    fp.close();
}

////////////////////////////////////////////////////////////////////

string Skill::moveJoint(string j, double val) {
    stringstream message;
    message << "(" << j << " " << val << ")";
    return message.str();
}

///////////////////////////////////////////////////////////////////
string Skill::act(double a[][24], int m, int n, double &time, bool &t, int &repeat) {
    if (t)
        return "";
    string ss = "";
    for (int i = 1; i < n; i++) {
        if (a[0][i] < time && time <= a[1][i]) {
            for (int j = 2; j < m; j++) {
                double speed = (a[j][i] - WorldModel::instance().getJointAngle(WorldModel::instance().num2Str(a[j][0]))) / (a[1][i] - time) / 50.0;
                if (fabs(a[j][i] - WorldModel::instance().getJointAngle(WorldModel::instance().num2Str(a[j][0]))) > .4) {
                    ss += moveJoint(WorldModel::instance().num2Str(a[j][0]), speed);
                } else
                    ss += fix(WorldModel::instance().num2Str(a[j][0]));
            }
            break;
        } else
            continue;
    }
    time += 0.02;
    if (time > a[1][n - 1]) {
        t = true;
        repeat++;
        return "";
    }
    return ss;
}//////////////////////////////////////////////////////////////////////

string Skill::fix() {
    stringstream ss;
    for (int i = 0; i < 22; i++)
        ss << moveJoint(WorldModel::instance().num2Str(i), 0);
    return ss.str();
}
//////////////////////////////////////////////////////////////////////
string Skill::fix(string j) {
    return moveJoint(j, 0);
}
////////////////////////////////////////////////////////////////////
string Skill::standUp(string s, bool &done, double &t,int &repeat) {
    if (done) {
        t = 0;
        return fix();
    }
	if (s == "Front")
        return act(standupF, standupF[0][0], standupF[1][0], t, done, repeat);
    else
        return act(standupB, standupB[0][0], standupB[1][0], t, done, repeat);
}
///////////////////////////////////////////////////////////////////////
// string Skill::StandingBack(bool &done, double &t, int& repeat) {
//     if (done) {
//         t = 0;
//         return fix();
//     }
//     return act(standingB, standingB[0][0], standingB[1][0], t, done, repeat);
// }
////////////////////////////////////////////////////////////////////////