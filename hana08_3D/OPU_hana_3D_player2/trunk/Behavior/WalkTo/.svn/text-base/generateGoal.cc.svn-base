#include "walkto.ih"

rf<Behavior::Goal> WalkTo::generateGoal(unsigned step, unsigned slot)
{
  WorldModel& wm = WorldModel::getInstance();
  Vector3D targetPos, straight(1,0,0);
  double angleToPos;

  rf<Goal> goal = new Goal();
  rf<OrNode> dis = goal->addDisjunct();
  rf<AndNode> con = dis->addConjunct();
      
      targetPos = d_goal->getVector("Pos"); // target position
      targetPos.setZ(0);

//	  std::cout << "In WalkTo::generateGoal\n  Pos = (" << pos.getX() << ", " << pos.getY() << ", " << pos.getZ() << ")" << std::endl;

	  // Calculate the shortest distance between ball and our goal line. 
	  Vector3D ballPos = wm.getObjectPosition(Types::BALL).getMu(); // -> (x, y)
	  ballPos.setZ(0.0);
	  Vector3D goal1Pos = wm.getObjectPosition(Types::GOAL1US).getMu(); // -> (a, b)
	  goal1Pos.setZ(0);
	  Vector3D goal2Pos = wm.getObjectPosition(Types::GOAL2US).getMu(); // -> (c, d)
	  goal2Pos.setZ(0);
//	  std::cout << "ballPos = " << ballPos << std::endl;

	  //         |(d-b)x + (a-c)y - ad + bc|
	  // dist = -----------------------------
	  //          sqrt( (d-b)^2 + (a-c)^2 )
	  double distBallToGoal = fabs((goal2Pos.getY() - goal1Pos.getY()) * ballPos.getX() + (goal1Pos.getX() - goal2Pos.getX()) * ballPos.getY() - goal1Pos.getX() * goal2Pos.getY() + goal1Pos.getY() * goal2Pos.getX()) / sqrt( pow((double)(goal2Pos.getY() - goal1Pos.getY()), (double)2.0) + pow((double)(goal1Pos.getX() - goal1Pos.getX()), (double)2.0) );
//	  std::cout << "dist = " << distBallToGoal << std::endl;

	  if(distBallToGoal < 1.0){
		Vector3D goalLine;
		if(goal1Pos.length() < goal2Pos.length())
		  goalLine = goal2Pos - goal1Pos;
		else
		  goalLine = goal1Pos - goal2Pos;
		goalLine.setZ(0);
		targetPos = ballPos - goalLine.normalize() * 0.3;
		angleToPos = straight.angle(targetPos) / M_PI * 180.0;
		if (targetPos.getY() < 0)
		  angleToPos = -angleToPos;
	  }
	  else{
		if(targetPos.length() > 0.3){
		  angleToPos = straight.angle(targetPos) / M_PI * 180.0;
		  if (targetPos.getY() < 0)
		    angleToPos = -angleToPos;
        }
		else{
		  if(ballPos.length() < 0.5){
			targetPos = ballPos;
			angleToPos = straight.angle(targetPos) / M_PI * 180.0;
      		if (targetPos.getY() < 0)
      		  angleToPos = -angleToPos;
		  }
		  else{
			Vector3D direction = targetPos - ballPos;
			direction.setZ(0.0);
			angleToPos = straight.angle(direction) / M_PI * 180.0;
      		if (direction.getY() < 0)
      		  angleToPos = -angleToPos;
		  }
		}
	  }

      _debugLevel4(ident() << " " << pos << " " << angleToPos);
//      std::cout << "  angleToPos = " << angleToPos << std::endl;
  switch (step)
  {
      case 0:  // turn to
		con->addVar("Angle", angleToPos, angleToPos);   
		con->addVar("Pos", targetPos); 
		con->addVar("WalkTo", 0, 0);
      return goal;

      case 1: // walk straight to
		con->addVar("Pos", targetPos); 
      return goal;
  }
  
  return 0;
}
